<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="2.1"
	xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd">

	<!-- Usuario -->

	<named-query name="findUserTremnByEmailAndPassword">
		<query>
			select u
			from UserTremn u
			where u.password = :pPassword
			and   u.email    = :pEmail
		</query>
	</named-query>
	
	
	<!-- Contact -->
	
	<named-query name="searchContact">
		<query>
			select c
			from Contact c
			order by c.firstName, c.lastName
		</query>
	</named-query>

	<named-query name="searchContactByFistNameOrLastNameOrCity">
		<query>
			select distinct c
			from Contact c
			where c.firstName          like :pName
			or   c.lastName            like :pName
			or   c.address.addressCity like :pCityName
			order by c.firstName, c.lastName
		</query>
	</named-query>
	
	<named-query name="searchContactWithImage">
		<query>
			select c
			from Contact c
			where c.imageBinary IS NOT NULL
		</query>
	</named-query>
	
	<named-query name="findContactByEmailPrincipal">
		<query>
			select c
			from Contact c
			where c.emailPrincipal = :pEmailPrincipal
		</query>
	</named-query>
	
	<named-query name="searchContactByInterestArea">
		<query>
			select c
			from Contact c
				join c.interestAreas area
			where area = :pInterestArea
			order by c.firstName, c.lastName
		</query>
	</named-query>
	
	<named-query name="searchContactByProfession">
		<query>
			select c
			from Contact c
				join c.professions p
			where p = :pProfession
			order by c.firstName, c.lastName
		</query>
	</named-query>
	
	
	<!-- Product -->
	
	<named-query name="findProductByName">
		<query>
			select p
			from Product p
			where p.name = :pName
		</query>
	</named-query>

	<named-query name="searchProduct">
		<query>
			select p
			from Product p
			order by p.name
		</query>
	</named-query>
	
	<named-query name="searchProductByFlagActive">
		<query>
			select p
			from Product p
			where p.flagActive = :pFlagActive
			order by p.name
		</query>
	</named-query>
	


	<!-- Event -->
	
	<named-query name="findEventByName">
		<query>
			select e
			from Event e
			where e.name = :pName
		</query>
	</named-query>
	
	<named-query name="searchEvent">
		<query>
			select e
			from Event e
				join e.product p
			order by p.name, e.name
		</query>
	</named-query>
	
	
	<!-- Vinculo -->
	
	<named-query name="findVinculoByContactAndEvent">
		<query>
			select v
			from Vinculo v
			where v.contact = :pContact
			and   v.event   = :pEvent
		</query>
	</named-query>

	
	<!-- area de interesse -->
	
	<named-query name="searchInterestArea">
		<query>
			select ia
			from InterestArea ia
			order by ia.description
		</query>
	</named-query>
	
	<named-query name="searchActiveInterestArea">
		<query>
			select ia
			from InterestArea ia
			where ia.flagActive = TRUE
			order by ia.description
		</query>
	</named-query>
	
	<named-query name="findInterestAreaByDescription">
		<query>
			select ia
			from InterestArea ia
			where ia.description = :pDescription
		</query>
	</named-query>
	
	
	<!-- profissao -->
	
	<named-query name="searchProfession">
		<query>
			select p
			from Profession p
			order by p.name
		</query>
	</named-query>
	
	<named-query name="searchActiveProfession">
		<query>
			select p
			from Profession p
			where p.flagActive = TRUE
			order by p.name
		</query>
	</named-query>
	
	<named-query name="findProfessionByName">
		<query>
			select p
			from Profession p
			where p.name = :pName
		</query>
	</named-query>
	
	
	<!-- maturity -->
	
	<named-query name="searchMaturity">
		<query>
			select m
			from Maturity m
			order by m.minAge
		</query>
	</named-query>
	
	<named-query name="findMaturityByAge">
		<query>
			select m
			from Maturity m
			where :pAge between m.minAge and m.maxAge
			order by m.minAge
		</query>
	</named-query>


	<!-- Payment method -->
	
	<named-query name="searchPaymentMethod">
		<query>
			select pm
			from PaymentMethod pm
			order by pm.description
		</query>
	</named-query>
	
	<named-query name="searchPaymentMethodByFlagActive">
		<query>
			select pm
			from PaymentMethod pm
			where pm.flagActive = :pFlagActive
			order by pm.description
		</query>
	</named-query>
	
	
	
	<!-- business card -->
	
	<named-query name="searchContactBusinessCard">
		<query>
			select card
			from ContactBusinessCard card
			order by card.uploadDate
		</query>
	</named-query>
	
	
	
	<!-- inscription form -->
	
	<named-query name="searchContactInscriptionForm">
		<query>
			select f
			from ContactInscriptionForm f
			order by f.uploadDate
		</query>
	</named-query>


</entity-mappings>
